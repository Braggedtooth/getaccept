/*
 * GetAccept
 * GetAccept provides a sales enablement platform for sales to design, send, promote, track, and e-sign sales documents, leveraging sales collateral, contract management, proposals, and electronic signatures in one place.
 *
 * OpenAPI spec version: 1.6
 * Contact: integrations@getaccept.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The SubscriptionsBody model module.
 * @module model/SubscriptionsBody
 * @version 1.6
 */
export class SubscriptionsBody {
  /**
   * Constructs a new <code>SubscriptionsBody</code>.
   * @alias module:model/SubscriptionsBody
   * @class
   * @param event {module:model/SubscriptionsBody.EventEnum} Event trigger
   * @param targetUrl {String} The URL to post payload to on event
   */
  constructor(event, targetUrl) {
    this.event = event;
    this.targetUrl = targetUrl;
  }

  /**
   * Constructs a <code>SubscriptionsBody</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SubscriptionsBody} obj Optional instance to populate.
   * @return {module:model/SubscriptionsBody} The populated <code>SubscriptionsBody</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new SubscriptionsBody();
      if (data.hasOwnProperty('event'))
        obj.event = ApiClient.convertToType(data['event'], 'String');
      if (data.hasOwnProperty('target_url'))
        obj.targetUrl = ApiClient.convertToType(data['target_url'], 'String');
      if (data.hasOwnProperty('host'))
        obj.host = ApiClient.convertToType(data['host'], 'String');
      if (data.hasOwnProperty('payload'))
        obj.payload = ApiClient.convertToType(data['payload'], 'String');
      if (data.hasOwnProperty('global'))
        obj.global = ApiClient.convertToType(data['global'], 'Boolean');
      if (data.hasOwnProperty('notification_email'))
        obj.notificationEmail = ApiClient.convertToType(data['notification_email'], 'String');
    }
    return obj;
  }
}

/**
 * Allowed values for the <code>event</code> property.
 * @enum {String}
 * @readonly
 */
SubscriptionsBody.EventEnum = {
  /**
   * value: "document.created"
   * @const
   */
  created: "document.created",

  /**
   * value: "document.sent"
   * @const
   */
  sent: "document.sent",

  /**
   * value: "document.viewed"
   * @const
   */
  viewed: "document.viewed",

  /**
   * value: "document.reviewed"
   * @const
   */
  reviewed: "document.reviewed",

  /**
   * value: "document.signed"
   * @const
   */
  signed: "document.signed",

  /**
   * value: "document.approved"
   * @const
   */
  approved: "document.approved",

  /**
   * value: "document.expired"
   * @const
   */
  expired: "document.expired",

  /**
   * value: "document.rejected"
   * @const
   */
  rejected: "document.rejected",

  /**
   * value: "document.downloaded"
   * @const
   */
  downloaded: "document.downloaded",

  /**
   * value: "document.printed"
   * @const
   */
  printed: "document.printed",

  /**
   * value: "document.forwarded"
   * @const
   */
  forwarded: "document.forwarded",

  /**
   * value: "document.partially_signed"
   * @const
   */
  partiallySigned: "document.partially_signed",

  /**
   * value: "document.commented"
   * @const
   */
  commented: "document.commented",

  /**
   * value: "document.hardbounced"
   * @const
   */
  hardbounced: "document.hardbounced",

  /**
   * value: "document.imported"
   * @const
   */
  imported: "document.imported"
};
/**
 * Event trigger
 * @member {module:model/SubscriptionsBody.EventEnum} event
 */
SubscriptionsBody.prototype.event = undefined;

/**
 * The URL to post payload to on event
 * @member {String} targetUrl
 */
SubscriptionsBody.prototype.targetUrl = undefined;

/**
 * The host name to send the post to
 * @member {String} host
 */
SubscriptionsBody.prototype.host = undefined;

/**
 * Additional payload data to post
 * @member {String} payload
 */
SubscriptionsBody.prototype.payload = undefined;

/**
 * If the webhook should catch events for all entity users.
 * @member {Boolean} global
 * @default true
 */
SubscriptionsBody.prototype.global = true;

/**
 * If the event fails, send a notification to this email instead of the sender
 * @member {String} notificationEmail
 */
SubscriptionsBody.prototype.notificationEmail = undefined;

