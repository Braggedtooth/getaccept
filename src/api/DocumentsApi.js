/*
 * GetAccept
 * GetAccept provides a sales enablement platform for sales to design, send, promote, track, and e-sign sales documents, leveraging sales collateral, contract management, proposals, and electronic signatures in one place.
 *
 * OpenAPI spec version: 1.6
 * Contact: integrations@getaccept.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Document} from '../model/Document';
import {DocumentIdSealBody} from '../model/DocumentIdSealBody';
import {DocumentIdSendBody} from '../model/DocumentIdSendBody';
import {Documents} from '../model/Documents';
import {DocumentsBody} from '../model/DocumentsBody';
import {Error} from '../model/Error';
import {Fields} from '../model/Fields';
import {InlineResponse2004} from '../model/InlineResponse2004';
import {InlineResponse2008} from '../model/InlineResponse2008';
import {Recipients} from '../model/Recipients';
import {UploadBody} from '../model/UploadBody';

/**
* Documents service.
* @module api/DocumentsApi
* @version 1.6
*/
export class DocumentsApi {

    /**
    * Constructs a new DocumentsApi. 
    * @alias module:api/DocumentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createDocument operation.
     * @callback moduleapi/DocumentsApi~createDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create and send document or template
     * You must create a document to be able to send it to a recipient. When creating a document you can refer to previously uploaded files with file_id or you can choose to create a document and upload the files in on API post. You can only upload ONE file when including a file in the create document POST.  Use either file_ids parameter to use existing uploaded file(s), file_content to send the document as base64 encoded string or do a multipart post with file parameter.  All recipients must have either a valid e-mail or a mobile number.  All events are recorded using requestor IP address. You can override this using header CLIENT_IP containing the end-users public IP address.
     * @param {module:model/DocumentsBody} body A JSON object containing document information
     * @param {module:api/DocumentsApi~createDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createDocument(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createDocument");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Oauth2', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Document;

      return this.apiClient.callApi(
        '/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the downloadDocument operation.
     * @callback moduleapi/DocumentsApi~downloadDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download document
     * Document file can always be downloaded but most likely you want to download it when it has status Signed.   You can select to receive a download-url or get the binary file.  The download URL is accessable 10 minutes after a request has been made.
     * @param {String} documentId Document ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.direct Return the binary file directly (default to <.>)
     * @param {module:api/DocumentsApi~downloadDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    downloadDocument(documentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling downloadDocument");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
        'direct': opts['direct']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Oauth2', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/pdf'];
      let returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/documents/{documentId}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDocumentDetails operation.
     * @callback moduleapi/DocumentsApi~getDocumentDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get document details
     * Get document details by specifying a document id.
     * @param {String} documentId Document ID
     * @param {module:api/DocumentsApi~getDocumentDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDocumentDetails(documentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getDocumentDetails");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Oauth2', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;

      return this.apiClient.callApi(
        '/documents/{documentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listDocumentFields operation.
     * @callback moduleapi/DocumentsApi~listDocumentFieldsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Fields{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get document fields
     * Get a list of fields for a document or template. Can be used both before and after a document has been signed.
     * @param {String} documentId Document ID
     * @param {module:api/DocumentsApi~listDocumentFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listDocumentFields(documentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling listDocumentFields");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Oauth2', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Fields;

      return this.apiClient.callApi(
        '/documents/{documentId}/fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listDocuments operation.
     * @callback moduleapi/DocumentsApi~listDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Documents{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List documents
     * Get a list of available documents
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.filter Filter list on status
     * @param {module:model/String} opts.sortBy How to sort results
     * @param {module:model/String} opts.sortOrder Sort order of results
     * @param {Boolean} opts.showteam Include documents from team members
     * @param {Boolean} opts.showall Include all documents from entity
     * @param {String} opts.externalId An external ID is a custom field which can contain a unique record identifier from a system outside of GetAccept
     * @param {Number} opts.offset Start list from record x until limit
     * @param {Number} opts.limit Number of records to list
     * @param {module:api/DocumentsApi~listDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listDocuments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'filter': opts['filter'],'sort_by': opts['sortBy'],'sort_order': opts['sortOrder'],'showteam': opts['showteam'],'showall': opts['showall'],'external_id': opts['externalId'],'offset': opts['offset'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Oauth2', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Documents;

      return this.apiClient.callApi(
        '/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listRecipients operation.
     * @callback moduleapi/DocumentsApi~listRecipientsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Recipients{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get document recipients
     * Get a list of recipients for a specific document.
     * @param {String} documentId Document ID
     * @param {module:api/DocumentsApi~listRecipientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listRecipients(documentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling listRecipients");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Oauth2', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Recipients;

      return this.apiClient.callApi(
        '/documents/{documentId}/recipients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sealDocument operation.
     * @callback moduleapi/DocumentsApi~sealDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Recipients{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Seal document
     * If you prefer to send the document manually you can use this method to seal the document. Do not use this method if you send the document automatically or if you use the send document method above.  This API call triggers the document seal action and can only be performed on documents with document_status &#x3D; draft. The method will return individual access/signing links for each recipient.  If document was created using self-sign option it will also be self-signed by the authenticated or specified user before sealing.
     * @param {String} documentId Document ID
     * @param {Object} opts Optional parameters
     * @param {module:model/DocumentIdSealBody} opts.body An optional JSON object containing seal information
     * @param {module:api/DocumentsApi~sealDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    sealDocument(documentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling sealDocument");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Oauth2', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Recipients;

      return this.apiClient.callApi(
        '/documents/{documentId}/seal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sendDocument operation.
     * @callback moduleapi/DocumentsApi~sendDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send existing document
     * When you send a document via GetAccept, we deliver an email to all recipients, each containing a unique, secured link. This API call triggers the document send action and can only be performed on documents with document_status &#x3D; draft. The document will be sent to recipients you provided when it was created.  If document was created using self-sign option it will also be self-signed by the authenticated or specified user before sending.
     * @param {String} documentId Document ID
     * @param {Object} opts Optional parameters
     * @param {module:model/DocumentIdSendBody} opts.body An optional JSON object containing sending information
     * @param {module:api/DocumentsApi~sendDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    sendDocument(documentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling sendDocument");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Oauth2', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Document;

      return this.apiClient.callApi(
        '/documents/{documentId}/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the uploadDocument operation.
     * @callback moduleapi/DocumentsApi~uploadDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2008{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a document file
     * You can upload one file at a time and get a file id. The file id is used to connect a file with a GetAccept document which is sent to recipients. If you want to upload mutliple files you run multiple POST. We only accept files up to 10 MB as default. Uploaded file need to be imported/added to a document within 48 hours after uploading.  We recommended you to upload PDF files in order to guarantee the same look when sent. Other file types can be converted, such as:  Mirosoft Office: doc, docx, xl, xls, xlsx, ppt, pptx Mac: numbers, key Images: jpg, jpeg, png Other: html, tex, csv
     * @param {module:model/UploadBody} body A JSON object containing the uploaded document information
     * @param {Blob} file 
     * @param {module:api/DocumentsApi~uploadDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    uploadDocument(body, file, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uploadDocument");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadDocument");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'file': file
      };

      let authNames = ['Oauth2', 'Token'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2008;

      return this.apiClient.callApi(
        '/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}