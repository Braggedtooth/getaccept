/*
 * GetAccept
 * GetAccept provides a sales enablement platform for sales to design, send, promote, track, and e-sign sales documents, leveraging sales collateral, contract management, proposals, and electronic signatures in one place.
 *
 * OpenAPI spec version: 1.6
 * Contact: integrations@getaccept.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Error} from '../model/Error';
import {Fields} from '../model/Fields';
import {InlineResponse2002} from '../model/InlineResponse2002';
import {InlineResponse2005} from '../model/InlineResponse2005';

/**
* Templates service.
* @module api/TemplatesApi
* @version 1.6
*/
export class TemplatesApi {

    /**
    * Constructs a new TemplatesApi. 
    * @alias module:api/TemplatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the listFields operation.
     * @callback moduleapi/TemplatesApi~listFieldsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Fields{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get template fields
     * Receive a list of fields for a specific template.
     * @param {String} templateId Template ID
     * @param {module:api/TemplatesApi~listFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listFields(templateId, callback) {
      
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling listFields");
      }

      let pathParams = {
        'templateId': templateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Oauth2', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Fields;

      return this.apiClient.callApi(
        '/templates/{templateId}/fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listRoles operation.
     * @callback moduleapi/TemplatesApi~listRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get template roles
     * Receive a list of roles for a specific template.
     * @param {String} templateId Template ID
     * @param {module:api/TemplatesApi~listRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listRoles(templateId, callback) {
      
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling listRoles");
      }

      let pathParams = {
        'templateId': templateId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Oauth2', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/templates/{templateId}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listTemplates operation.
     * @callback moduleapi/TemplatesApi~listTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List templates
     * Receive a list of available document templates. You can add new templates under the Templates-section in GetAccept.
     * @param {Object} opts Optional parameters
     * @param {String} opts.showall Show all templates for entity (default to <.>)
     * @param {String} opts.folderId Show templates in a specific folder
     * @param {module:api/TemplatesApi~listTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listTemplates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'showall': opts['showall'],'folder_id': opts['folderId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Oauth2', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}