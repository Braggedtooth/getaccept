/*
 * GetAccept
 * GetAccept provides a sales enablement platform for sales to design, send, promote, track, and e-sign sales documents, leveraging sales collateral, contract management, proposals, and electronic signatures in one place.
 *
 * OpenAPI spec version: 1.6
 * Contact: integrations@getaccept.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GetAccept);
  }
}(this, function(expect, GetAccept) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse2002Templates', function() {
      beforeEach(function() {
        instance = new GetAccept.InlineResponse2002Templates();
      });

      it('should create an instance of InlineResponse2002Templates', function() {
        // TODO: update the code to test InlineResponse2002Templates
        expect(instance).to.be.a(GetAccept.InlineResponse2002Templates);
      });

      it('should have the property isPrivate (base name: "is_private")', function() {
        // TODO: update the code to test the property isPrivate
        expect(instance).to.have.property('isPrivate');
        // expect(instance.isPrivate).to.be(expectedValueLiteral);
      });

      it('should have the property roleCount (base name: "role_count")', function() {
        // TODO: update the code to test the property roleCount
        expect(instance).to.have.property('roleCount');
        // expect(instance.roleCount).to.be(expectedValueLiteral);
      });

      it('should have the property thumbUrl (base name: "thumb_url")', function() {
        // TODO: update the code to test the property thumbUrl
        expect(instance).to.have.property('thumbUrl');
        // expect(instance.thumbUrl).to.be(expectedValueLiteral);
      });

      it('should have the property videoId (base name: "video_id")', function() {
        // TODO: update the code to test the property videoId
        expect(instance).to.have.property('videoId');
        // expect(instance.videoId).to.be(expectedValueLiteral);
      });

      it('should have the property videoThumbUrl (base name: "video_thumb_url")', function() {
        // TODO: update the code to test the property videoThumbUrl
        expect(instance).to.have.property('videoThumbUrl');
        // expect(instance.videoThumbUrl).to.be(expectedValueLiteral);
      });

      it('should have the property userId (base name: "user_id")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "created_at")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property externalEditorType (base name: "external_editor_type")', function() {
        // TODO: update the code to test the property externalEditorType
        expect(instance).to.have.property('externalEditorType');
        // expect(instance.externalEditorType).to.be(expectedValueLiteral);
      });

      it('should have the property isEditable (base name: "is_editable")', function() {
        // TODO: update the code to test the property isEditable
        expect(instance).to.have.property('isEditable');
        // expect(instance.isEditable).to.be(expectedValueLiteral);
      });

      it('should have the property tags (base name: "tags")', function() {
        // TODO: update the code to test the property tags
        expect(instance).to.have.property('tags');
        // expect(instance.tags).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property pageCount (base name: "page_count")', function() {
        // TODO: update the code to test the property pageCount
        expect(instance).to.have.property('pageCount');
        // expect(instance.pageCount).to.be(expectedValueLiteral);
      });

      it('should have the property fieldCount (base name: "field_count")', function() {
        // TODO: update the code to test the property fieldCount
        expect(instance).to.have.property('fieldCount');
        // expect(instance.fieldCount).to.be(expectedValueLiteral);
      });

      it('should have the property senderName (base name: "sender_name")', function() {
        // TODO: update the code to test the property senderName
        expect(instance).to.have.property('senderName');
        // expect(instance.senderName).to.be(expectedValueLiteral);
      });

      it('should have the property senderThumbUrl (base name: "sender_thumb_url")', function() {
        // TODO: update the code to test the property senderThumbUrl
        expect(instance).to.have.property('senderThumbUrl');
        // expect(instance.senderThumbUrl).to.be(expectedValueLiteral);
      });

    });
  });

}));
