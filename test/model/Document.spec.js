/*
 * GetAccept
 * GetAccept provides a sales enablement platform for sales to design, send, promote, track, and e-sign sales documents, leveraging sales collateral, contract management, proposals, and electronic signatures in one place.
 *
 * OpenAPI spec version: 1.6
 * Contact: integrations@getaccept.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GetAccept);
  }
}(this, function(expect, GetAccept) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Document', function() {
      beforeEach(function() {
        instance = new GetAccept.Document();
      });

      it('should create an instance of Document', function() {
        // TODO: update the code to test Document
        expect(instance).to.be.a(GetAccept.Document);
      });

      it('should have the property userId (base name: "user_id")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

      it('should have the property emailSendSubject (base name: "email_send_subject")', function() {
        // TODO: update the code to test the property emailSendSubject
        expect(instance).to.have.property('emailSendSubject');
        // expect(instance.emailSendSubject).to.be(expectedValueLiteral);
      });

      it('should have the property isSigned (base name: "is_signed")', function() {
        // TODO: update the code to test the property isSigned
        expect(instance).to.have.property('isSigned');
        // expect(instance.isSigned).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property value (base name: "value")', function() {
        // TODO: update the code to test the property value
        expect(instance).to.have.property('value');
        // expect(instance.value).to.be(expectedValueLiteral);
      });

      it('should have the property isPrivate (base name: "is_private")', function() {
        // TODO: update the code to test the property isPrivate
        expect(instance).to.have.property('isPrivate');
        // expect(instance.isPrivate).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property sendDate (base name: "send_date")', function() {
        // TODO: update the code to test the property sendDate
        expect(instance).to.have.property('sendDate');
        // expect(instance.sendDate).to.be(expectedValueLiteral);
      });

      it('should have the property signDate (base name: "sign_date")', function() {
        // TODO: update the code to test the property signDate
        expect(instance).to.have.property('signDate');
        // expect(instance.signDate).to.be(expectedValueLiteral);
      });

      it('should have the property isScheduledSending (base name: "is_scheduled_sending")', function() {
        // TODO: update the code to test the property isScheduledSending
        expect(instance).to.have.property('isScheduledSending');
        // expect(instance.isScheduledSending).to.be(expectedValueLiteral);
      });

      it('should have the property isSigningForward (base name: "is_signing_forward")', function() {
        // TODO: update the code to test the property isSigningForward
        expect(instance).to.have.property('isSigningForward');
        // expect(instance.isSigningForward).to.be(expectedValueLiteral);
      });

      it('should have the property senderThumbUrl (base name: "sender_thumb_url")', function() {
        // TODO: update the code to test the property senderThumbUrl
        expect(instance).to.have.property('senderThumbUrl');
        // expect(instance.senderThumbUrl).to.be(expectedValueLiteral);
      });

      it('should have the property autoCommentText (base name: "auto_comment_text")', function() {
        // TODO: update the code to test the property autoCommentText
        expect(instance).to.have.property('autoCommentText');
        // expect(instance.autoCommentText).to.be(expectedValueLiteral);
      });

      it('should have the property thumbUrl (base name: "thumb_url")', function() {
        // TODO: update the code to test the property thumbUrl
        expect(instance).to.have.property('thumbUrl');
        // expect(instance.thumbUrl).to.be(expectedValueLiteral);
      });

      it('should have the property tags (base name: "tags")', function() {
        // TODO: update the code to test the property tags
        expect(instance).to.have.property('tags');
        // expect(instance.tags).to.be(expectedValueLiteral);
      });

      it('should have the property emailSendTemplateId (base name: "email_send_template_id")', function() {
        // TODO: update the code to test the property emailSendTemplateId
        expect(instance).to.have.property('emailSendTemplateId');
        // expect(instance.emailSendTemplateId).to.be(expectedValueLiteral);
      });

      it('should have the property emailSendMessage (base name: "email_send_message")', function() {
        // TODO: update the code to test the property emailSendMessage
        expect(instance).to.have.property('emailSendMessage');
        // expect(instance.emailSendMessage).to.be(expectedValueLiteral);
      });

      it('should have the property isAutoComment (base name: "is_auto_comment")', function() {
        // TODO: update the code to test the property isAutoComment
        expect(instance).to.have.property('isAutoComment');
        // expect(instance.isAutoComment).to.be(expectedValueLiteral);
      });

      it('should have the property isSigningInitials (base name: "is_signing_initials")', function() {
        // TODO: update the code to test the property isSigningInitials
        expect(instance).to.have.property('isSigningInitials');
        // expect(instance.isSigningInitials).to.be(expectedValueLiteral);
      });

      it('should have the property senderName (base name: "sender_name")', function() {
        // TODO: update the code to test the property senderName
        expect(instance).to.have.property('senderName');
        // expect(instance.senderName).to.be(expectedValueLiteral);
      });

      it('should have the property parentId (base name: "parent_id")', function() {
        // TODO: update the code to test the property parentId
        expect(instance).to.have.property('parentId');
        // expect(instance.parentId).to.be(expectedValueLiteral);
      });

      it('should have the property externalEditorId (base name: "external_editor_id")', function() {
        // TODO: update the code to test the property externalEditorId
        expect(instance).to.have.property('externalEditorId');
        // expect(instance.externalEditorId).to.be(expectedValueLiteral);
      });

      it('should have the property companyName (base name: "company_name")', function() {
        // TODO: update the code to test the property companyName
        expect(instance).to.have.property('companyName');
        // expect(instance.companyName).to.be(expectedValueLiteral);
      });

      it('should have the property isAutoCommentEmail (base name: "is_auto_comment_email")', function() {
        // TODO: update the code to test the property isAutoCommentEmail
        expect(instance).to.have.property('isAutoCommentEmail');
        // expect(instance.isAutoCommentEmail).to.be(expectedValueLiteral);
      });

      it('should have the property downloadUrl (base name: "download_url")', function() {
        // TODO: update the code to test the property downloadUrl
        expect(instance).to.have.property('downloadUrl');
        // expect(instance.downloadUrl).to.be(expectedValueLiteral);
      });

      it('should have the property expirationDate (base name: "expiration_date")', function() {
        // TODO: update the code to test the property expirationDate
        expect(instance).to.have.property('expirationDate');
        // expect(instance.expirationDate).to.be(expectedValueLiteral);
      });

      it('should have the property scheduledSendingTime (base name: "scheduled_sending_time")', function() {
        // TODO: update the code to test the property scheduledSendingTime
        expect(instance).to.have.property('scheduledSendingTime');
        // expect(instance.scheduledSendingTime).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "created_at")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property externalId (base name: "external_id")', function() {
        // TODO: update the code to test the property externalId
        expect(instance).to.have.property('externalId');
        // expect(instance.externalId).to.be(expectedValueLiteral);
      });

      it('should have the property externalEditorType (base name: "external_editor_type")', function() {
        // TODO: update the code to test the property externalEditorType
        expect(instance).to.have.property('externalEditorType');
        // expect(instance.externalEditorType).to.be(expectedValueLiteral);
      });

      it('should have the property companyLogoUrl (base name: "company_logo_url")', function() {
        // TODO: update the code to test the property companyLogoUrl
        expect(instance).to.have.property('companyLogoUrl');
        // expect(instance.companyLogoUrl).to.be(expectedValueLiteral);
      });

      it('should have the property uniqueId (base name: "unique_id")', function() {
        // TODO: update the code to test the property uniqueId
        expect(instance).to.have.property('uniqueId');
        // expect(instance.uniqueId).to.be(expectedValueLiteral);
      });

      it('should have the property isVideo (base name: "is_video")', function() {
        // TODO: update the code to test the property isVideo
        expect(instance).to.have.property('isVideo');
        // expect(instance.isVideo).to.be(expectedValueLiteral);
      });

      it('should have the property isIdentifyRecipient (base name: "is_identify_recipient")', function() {
        // TODO: update the code to test the property isIdentifyRecipient
        expect(instance).to.have.property('isIdentifyRecipient');
        // expect(instance.isIdentifyRecipient).to.be(expectedValueLiteral);
      });

      it('should have the property senderEmail (base name: "sender_email")', function() {
        // TODO: update the code to test the property senderEmail
        expect(instance).to.have.property('senderEmail');
        // expect(instance.senderEmail).to.be(expectedValueLiteral);
      });

      it('should have the property isSigning (base name: "is_signing")', function() {
        // TODO: update the code to test the property isSigning
        expect(instance).to.have.property('isSigning');
        // expect(instance.isSigning).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property externalClientId (base name: "external_client_id")', function() {
        // TODO: update the code to test the property externalClientId
        expect(instance).to.have.property('externalClientId');
        // expect(instance.externalClientId).to.be(expectedValueLiteral);
      });

      it('should have the property companyId (base name: "company_id")', function() {
        // TODO: update the code to test the property companyId
        expect(instance).to.have.property('companyId');
        // expect(instance.companyId).to.be(expectedValueLiteral);
      });

      it('should have the property isSelfsign (base name: "is_selfsign")', function() {
        // TODO: update the code to test the property isSelfsign
        expect(instance).to.have.property('isSelfsign');
        // expect(instance.isSelfsign).to.be(expectedValueLiteral);
      });

      it('should have the property isSigningBiometric (base name: "is_signing_biometric")', function() {
        // TODO: update the code to test the property isSigningBiometric
        expect(instance).to.have.property('isSigningBiometric');
        // expect(instance.isSigningBiometric).to.be(expectedValueLiteral);
      });

      it('should have the property isSigningOrder (base name: "is_signing_order")', function() {
        // TODO: update the code to test the property isSigningOrder
        expect(instance).to.have.property('isSigningOrder');
        // expect(instance.isSigningOrder).to.be(expectedValueLiteral);
      });

      it('should have the property autoCommentEmail (base name: "auto_comment_email")', function() {
        // TODO: update the code to test the property autoCommentEmail
        expect(instance).to.have.property('autoCommentEmail');
        // expect(instance.autoCommentEmail).to.be(expectedValueLiteral);
      });

      it('should have the property entityAutoCommentText (base name: "entity_auto_comment_text")', function() {
        // TODO: update the code to test the property entityAutoCommentText
        expect(instance).to.have.property('entityAutoCommentText');
        // expect(instance.entityAutoCommentText).to.be(expectedValueLiteral);
      });

      it('should have the property fieldCount (base name: "field_count")', function() {
        // TODO: update the code to test the property fieldCount
        expect(instance).to.have.property('fieldCount');
        // expect(instance.fieldCount).to.be(expectedValueLiteral);
      });

      it('should have the property companyNumber (base name: "company_number")', function() {
        // TODO: update the code to test the property companyNumber
        expect(instance).to.have.property('companyNumber');
        // expect(instance.companyNumber).to.be(expectedValueLiteral);
      });

      it('should have the property isReminderSending (base name: "is_reminder_sending")', function() {
        // TODO: update the code to test the property isReminderSending
        expect(instance).to.have.property('isReminderSending');
        // expect(instance.isReminderSending).to.be(expectedValueLiteral);
      });

      it('should have the property previewUrl (base name: "preview_url")', function() {
        // TODO: update the code to test the property previewUrl
        expect(instance).to.have.property('previewUrl');
        // expect(instance.previewUrl).to.be(expectedValueLiteral);
      });

      it('should have the property recipients (base name: "recipients")', function() {
        // TODO: update the code to test the property recipients
        expect(instance).to.have.property('recipients');
        // expect(instance.recipients).to.be(expectedValueLiteral);
      });

    });
  });

}));
