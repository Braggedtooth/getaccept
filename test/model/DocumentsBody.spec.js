/*
 * GetAccept
 * GetAccept provides a sales enablement platform for sales to design, send, promote, track, and e-sign sales documents, leveraging sales collateral, contract management, proposals, and electronic signatures in one place.
 *
 * OpenAPI spec version: 1.6
 * Contact: integrations@getaccept.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GetAccept);
  }
}(this, function(expect, GetAccept) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DocumentsBody', function() {
      beforeEach(function() {
        instance = new GetAccept.DocumentsBody();
      });

      it('should create an instance of DocumentsBody', function() {
        // TODO: update the code to test DocumentsBody
        expect(instance).to.be.a(GetAccept.DocumentsBody);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property templateId (base name: "template_id")', function() {
        // TODO: update the code to test the property templateId
        expect(instance).to.have.property('templateId');
        // expect(instance.templateId).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property value (base name: "value")', function() {
        // TODO: update the code to test the property value
        expect(instance).to.have.property('value');
        // expect(instance.value).to.be(expectedValueLiteral);
      });

      it('should have the property senderId (base name: "sender_id")', function() {
        // TODO: update the code to test the property senderId
        expect(instance).to.have.property('senderId');
        // expect(instance.senderId).to.be(expectedValueLiteral);
      });

      it('should have the property senderEmail (base name: "sender_email")', function() {
        // TODO: update the code to test the property senderEmail
        expect(instance).to.have.property('senderEmail');
        // expect(instance.senderEmail).to.be(expectedValueLiteral);
      });

      it('should have the property isSigningInitials (base name: "is_signing_initials")', function() {
        // TODO: update the code to test the property isSigningInitials
        expect(instance).to.have.property('isSigningInitials');
        // expect(instance.isSigningInitials).to.be(expectedValueLiteral);
      });

      it('should have the property isReminderSending (base name: "is_reminder_sending")', function() {
        // TODO: update the code to test the property isReminderSending
        expect(instance).to.have.property('isReminderSending');
        // expect(instance.isReminderSending).to.be(expectedValueLiteral);
      });

      it('should have the property isAutomaticSending (base name: "is_automatic_sending")', function() {
        // TODO: update the code to test the property isAutomaticSending
        expect(instance).to.have.property('isAutomaticSending');
        // expect(instance.isAutomaticSending).to.be(expectedValueLiteral);
      });

      it('should have the property videoId (base name: "video_id")', function() {
        // TODO: update the code to test the property videoId
        expect(instance).to.have.property('videoId');
        // expect(instance.videoId).to.be(expectedValueLiteral);
      });

      it('should have the property attachments (base name: "attachments")', function() {
        // TODO: update the code to test the property attachments
        expect(instance).to.have.property('attachments');
        // expect(instance.attachments).to.be(expectedValueLiteral);
      });

      it('should have the property isSigning (base name: "is_signing")', function() {
        // TODO: update the code to test the property isSigning
        expect(instance).to.have.property('isSigning');
        // expect(instance.isSigning).to.be(expectedValueLiteral);
      });

      it('should have the property isSmsSending (base name: "is_sms_sending")', function() {
        // TODO: update the code to test the property isSmsSending
        expect(instance).to.have.property('isSmsSending');
        // expect(instance.isSmsSending).to.be(expectedValueLiteral);
      });

      it('should have the property fileIds (base name: "file_ids")', function() {
        // TODO: update the code to test the property fileIds
        expect(instance).to.have.property('fileIds');
        // expect(instance.fileIds).to.be(expectedValueLiteral);
      });

      it('should have the property fileName (base name: "file_name")', function() {
        // TODO: update the code to test the property fileName
        expect(instance).to.have.property('fileName');
        // expect(instance.fileName).to.be(expectedValueLiteral);
      });

      it('should have the property fileContent (base name: "file_content")', function() {
        // TODO: update the code to test the property fileContent
        expect(instance).to.have.property('fileContent');
        // expect(instance.fileContent).to.be(expectedValueLiteral);
      });

      it('should have the property fileUrl (base name: "file_url")', function() {
        // TODO: update the code to test the property fileUrl
        expect(instance).to.have.property('fileUrl');
        // expect(instance.fileUrl).to.be(expectedValueLiteral);
      });

      it('should have the property isSigningForward (base name: "is_signing_forward")', function() {
        // TODO: update the code to test the property isSigningForward
        expect(instance).to.have.property('isSigningForward');
        // expect(instance.isSigningForward).to.be(expectedValueLiteral);
      });

      it('should have the property recipients (base name: "recipients")', function() {
        // TODO: update the code to test the property recipients
        expect(instance).to.have.property('recipients');
        // expect(instance.recipients).to.be(expectedValueLiteral);
      });

      it('should have the property isSigningBiometric (base name: "is_signing_biometric")', function() {
        // TODO: update the code to test the property isSigningBiometric
        expect(instance).to.have.property('isSigningBiometric');
        // expect(instance.isSigningBiometric).to.be(expectedValueLiteral);
      });

      it('should have the property expirationDate (base name: "expiration_date")', function() {
        // TODO: update the code to test the property expirationDate
        expect(instance).to.have.property('expirationDate');
        // expect(instance.expirationDate).to.be(expectedValueLiteral);
      });

      it('should have the property isScheduledSending (base name: "is_scheduled_sending")', function() {
        // TODO: update the code to test the property isScheduledSending
        expect(instance).to.have.property('isScheduledSending');
        // expect(instance.isScheduledSending).to.be(expectedValueLiteral);
      });

      it('should have the property scheduledSendingTime (base name: "scheduled_sending_time")', function() {
        // TODO: update the code to test the property scheduledSendingTime
        expect(instance).to.have.property('scheduledSendingTime');
        // expect(instance.scheduledSendingTime).to.be(expectedValueLiteral);
      });

      it('should have the property customFields (base name: "custom_fields")', function() {
        // TODO: update the code to test the property customFields
        expect(instance).to.have.property('customFields');
        // expect(instance.customFields).to.be(expectedValueLiteral);
      });

      it('should have the property externalId (base name: "external_id")', function() {
        // TODO: update the code to test the property externalId
        expect(instance).to.have.property('externalId');
        // expect(instance.externalId).to.be(expectedValueLiteral);
      });

    });
  });

}));
