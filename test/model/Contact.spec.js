/*
 * GetAccept
 * GetAccept provides a sales enablement platform for sales to design, send, promote, track, and e-sign sales documents, leveraging sales collateral, contract management, proposals, and electronic signatures in one place.
 *
 * OpenAPI spec version: 1.6
 * Contact: integrations@getaccept.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GetAccept);
  }
}(this, function(expect, GetAccept) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Contact', function() {
      beforeEach(function() {
        instance = new GetAccept.Contact();
      });

      it('should create an instance of Contact', function() {
        // TODO: update the code to test Contact
        expect(instance).to.be.a(GetAccept.Contact);
      });

      it('should have the property contactId (base name: "contact_id")', function() {
        // TODO: update the code to test the property contactId
        expect(instance).to.have.property('contactId');
        // expect(instance.contactId).to.be(expectedValueLiteral);
      });

      it('should have the property fullname (base name: "fullname")', function() {
        // TODO: update the code to test the property fullname
        expect(instance).to.have.property('fullname');
        // expect(instance.fullname).to.be(expectedValueLiteral);
      });

      it('should have the property firstName (base name: "first_name")', function() {
        // TODO: update the code to test the property firstName
        expect(instance).to.have.property('firstName');
        // expect(instance.firstName).to.be(expectedValueLiteral);
      });

      it('should have the property lastName (base name: "last_name")', function() {
        // TODO: update the code to test the property lastName
        expect(instance).to.have.property('lastName');
        // expect(instance.lastName).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property mobile (base name: "mobile")', function() {
        // TODO: update the code to test the property mobile
        expect(instance).to.have.property('mobile');
        // expect(instance.mobile).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property thumbUrl (base name: "thumb_url")', function() {
        // TODO: update the code to test the property thumbUrl
        expect(instance).to.have.property('thumbUrl');
        // expect(instance.thumbUrl).to.be(expectedValueLiteral);
      });

      it('should have the property note (base name: "note")', function() {
        // TODO: update the code to test the property note
        expect(instance).to.have.property('note');
        // expect(instance.note).to.be(expectedValueLiteral);
      });

      it('should have the property gender (base name: "gender")', function() {
        // TODO: update the code to test the property gender
        expect(instance).to.have.property('gender');
        // expect(instance.gender).to.be(expectedValueLiteral);
      });

      it('should have the property documentCount (base name: "document_count")', function() {
        // TODO: update the code to test the property documentCount
        expect(instance).to.have.property('documentCount');
        // expect(instance.documentCount).to.be(expectedValueLiteral);
      });

      it('should have the property companyId (base name: "company_id")', function() {
        // TODO: update the code to test the property companyId
        expect(instance).to.have.property('companyId');
        // expect(instance.companyId).to.be(expectedValueLiteral);
      });

      it('should have the property companyName (base name: "company_name")', function() {
        // TODO: update the code to test the property companyName
        expect(instance).to.have.property('companyName');
        // expect(instance.companyName).to.be(expectedValueLiteral);
      });

      it('should have the property companyNumber (base name: "company_number")', function() {
        // TODO: update the code to test the property companyNumber
        expect(instance).to.have.property('companyNumber');
        // expect(instance.companyNumber).to.be(expectedValueLiteral);
      });

      it('should have the property companyLogoUrl (base name: "company_logo_url")', function() {
        // TODO: update the code to test the property companyLogoUrl
        expect(instance).to.have.property('companyLogoUrl');
        // expect(instance.companyLogoUrl).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "created_at")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

    });
  });

}));
